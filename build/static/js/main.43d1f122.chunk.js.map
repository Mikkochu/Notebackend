{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","services_notes","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","objectSpread","returnedNote","map","catch","error","setTimeout","App_Notification","components_Note","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.43d1f122.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content} {\"   \"}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: \"This note is not saved to server\",\r\n    date: \"2019-05-30T17:30:31.098Z\",\r\n    important: true\r\n  };\r\n  return request.then(response => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"some error happened...\");\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => setNotes(initialNotes));\n  }, []);\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const rows = () =>\n    notesToShow.map(note => (\n      <Note\n        key={note.id}\n        note={note}\n        toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n    ));\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n\n    noteService.create(noteObject).then(data => {\n      setNotes(notes.concat(data));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>{rows()}</ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}